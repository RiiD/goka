// Code generated by MockGen. DO NOT EDIT.
// Source: topic_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	kazoo "github.com/wvanbergen/kazoo-go"
	reflect "reflect"
)

// MockTopicManager is a mock of TopicManager interface.
type MockTopicManager struct {
	ctrl     *gomock.Controller
	recorder *MockTopicManagerMockRecorder
}

// MockTopicManagerMockRecorder is the mock recorder for MockTopicManager.
type MockTopicManagerMockRecorder struct {
	mock *MockTopicManager
}

// NewMockTopicManager creates a new mock instance.
func NewMockTopicManager(ctrl *gomock.Controller) *MockTopicManager {
	mock := &MockTopicManager{ctrl: ctrl}
	mock.recorder = &MockTopicManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicManager) EXPECT() *MockTopicManagerMockRecorder {
	return m.recorder
}

// EnsureTableExists mocks base method.
func (m *MockTopicManager) EnsureTableExists(topic string, npar int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTableExists", topic, npar)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureTableExists indicates an expected call of EnsureTableExists.
func (mr *MockTopicManagerMockRecorder) EnsureTableExists(topic, npar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTableExists", reflect.TypeOf((*MockTopicManager)(nil).EnsureTableExists), topic, npar)
}

// EnsureStreamExists mocks base method.
func (m *MockTopicManager) EnsureStreamExists(topic string, npar int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureStreamExists", topic, npar)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureStreamExists indicates an expected call of EnsureStreamExists.
func (mr *MockTopicManagerMockRecorder) EnsureStreamExists(topic, npar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureStreamExists", reflect.TypeOf((*MockTopicManager)(nil).EnsureStreamExists), topic, npar)
}

// EnsureTopicExists mocks base method.
func (m *MockTopicManager) EnsureTopicExists(topic string, npar, rfactor int, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTopicExists", topic, npar, rfactor, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureTopicExists indicates an expected call of EnsureTopicExists.
func (mr *MockTopicManagerMockRecorder) EnsureTopicExists(topic, npar, rfactor, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTopicExists", reflect.TypeOf((*MockTopicManager)(nil).EnsureTopicExists), topic, npar, rfactor, config)
}

// Partitions mocks base method.
func (m *MockTopicManager) Partitions(topic string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partitions", topic)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Partitions indicates an expected call of Partitions.
func (mr *MockTopicManagerMockRecorder) Partitions(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partitions", reflect.TypeOf((*MockTopicManager)(nil).Partitions), topic)
}

// Close mocks base method.
func (m *MockTopicManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTopicManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTopicManager)(nil).Close))
}

// Mockkzoo is a mock of kzoo interface.
type Mockkzoo struct {
	ctrl     *gomock.Controller
	recorder *MockkzooMockRecorder
}

// MockkzooMockRecorder is the mock recorder for Mockkzoo.
type MockkzooMockRecorder struct {
	mock *Mockkzoo
}

// NewMockkzoo creates a new mock instance.
func NewMockkzoo(ctrl *gomock.Controller) *Mockkzoo {
	mock := &Mockkzoo{ctrl: ctrl}
	mock.recorder = &MockkzooMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockkzoo) EXPECT() *MockkzooMockRecorder {
	return m.recorder
}

// Topic mocks base method.
func (m *Mockkzoo) Topic(topic string) *kazoo.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", topic)
	ret0, _ := ret[0].(*kazoo.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockkzooMockRecorder) Topic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*Mockkzoo)(nil).Topic), topic)
}

// Topics mocks base method.
func (m *Mockkzoo) Topics() (kazoo.TopicList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics")
	ret0, _ := ret[0].(kazoo.TopicList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Topics indicates an expected call of Topics.
func (mr *MockkzooMockRecorder) Topics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*Mockkzoo)(nil).Topics))
}

// CreateTopic mocks base method.
func (m *Mockkzoo) CreateTopic(topic string, npar, rep int, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", topic, npar, rep, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockkzooMockRecorder) CreateTopic(topic, npar, rep, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*Mockkzoo)(nil).CreateTopic), topic, npar, rep, config)
}

// Close mocks base method.
func (m *Mockkzoo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockkzooMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockkzoo)(nil).Close))
}
